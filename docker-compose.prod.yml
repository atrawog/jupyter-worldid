services:
  traefik:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`traefik.${PROD_DOMAIN}`)"
      - "traefik.http.routers.api.service=api@internal"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
    image: traefik:v3.0.1
    container_name: prod-traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${PROD_EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--log.level=INFO"
      - "--accesslog=true"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./mnt/prod/letsencrypt:/letsencrypt
    profiles:
      - jupyterhub
    networks:
      - jupyter-prod


  jupyterhub:
    build:
      context: ./docker/jupyterhub
      args:
        JUPYTERHUB_CONFIG_FILE: jupyterhub_config_prod.py
    container_name: prod-jupyterhub
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      OAUTH_CLIENT_ID: ${PROD_OAUTH_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${PROD_OAUTH_CLIENT_SECRET}
      OAUTH_CALLBACK_URL: ${PROD_OAUTH_CALLBACK_URL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jupyterhub.rule=Host(`jupyter.${PROD_DOMAIN}`)"
      - "traefik.http.routers.jupyterhub.entrypoints=websecure"
      - "traefik.http.routers.jupyterhub.tls.certresolver=myresolver"
      - "traefik.http.services.jupyterhub.loadbalancer.server.port=8000"
    ports:
      - "8000:8000"
    profiles:
      - jupyterhub
    networks:
      - jupyter-prod

  erigon:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.erigon.rule=Host(`erigon.${PROD_DOMAIN}`)"
      - "traefik.http.routers.erigon.entrypoints=websecure"
      - "traefik.http.routers.erigon.tls.certresolver=myresolver"
      - "traefik.http.services.erigon.loadbalancer.server.port=8545"
    image: thorax/erigon:latest
    container_name: prod-erigon
    user: root
    volumes:
      - ./mnt/prod/erigon:/erigon
    command: >
      --chain=mainnet
      --http
      --http.addr=0.0.0.0
      --http.port=8545
      --http.api=eth,net,web3
      --http.corsdomain=*
      --http.vhosts=*
      --maxpeers=100
      --datadir=/erigon
      --ws
      --ws.compression
      --authrpc.addr=0.0.0.0
      --authrpc.port=8551
      --torrent.upload.rate=512mb
      --torrent.download.rate=512mb
      --log.console.verbosity=debug
      --metrics
    profiles:
      - erigon
    networks:
      - jupyter-prod

  prometheus:
    build:
      context: ./docker/prometheus
    container_name: prod-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    profiles:
      - monitoring
    networks:
      - jupyter-prod

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: prod-nodeexporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    profiles:
      - monitoring     
    networks:
      - jupyter-prod

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: prod-cadvisor
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    profiles:
      - monitoring
    networks:
      - jupyter-prod

  grafana:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${PROD_DOMAIN}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=myresolver"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    build:
      context: ./docker/grafana
    container_name: prod-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${PROD_GF_SECURITY_ADMIN_PASSWORD}
    profiles:
      - monitoring
    networks:
      - jupyter-prod

  blockscience:
    build:
      context: ./docker/blockscience
    image: blockscience:latest
    profiles:
      - buildonly

networks:
  jupyter-prod:
    name: jupyter-prod
    driver: bridge
    attachable: true
