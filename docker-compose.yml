services:
  jupyterhub:
    build:
      context: ./docker/jupyterhub
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
    environment:
      OAUTH_CLIENT_ID: ${OAUTH_CLIENT_ID}
      OAUTH_CLIENT_SECRET: ${OAUTH_CLIENT_SECRET}
      OAUTH_CALLBACK_URL: ${OAUTH_CALLBACK_URL}
      JUPITER_ADMIN: ${JUPITER_ADMIN}
      JUPITER_LOGLEVEL: ${JUPITER_LOGLEVEL}
      JUPITER_SPAWNIMAGE: ${JUPITER_SPAWNIMAGE}
      JUPITER_NETWORK: ${COMPOSE_PROJECT_NAME}_bridge
    profiles:
      - jupyterhub
    networks:
      - bridge

  erigon:
    image: thorax/erigon:latest
    user: root
    volumes:
      - ./mnt/devel/erigon:/erigon
    ports:
      - 8545:8545
      - 8551:8551
      - 30303:30303
    command: >
      --chain=mainnet
      --http
      --http.addr=0.0.0.0
      --http.port=8545
      --http.api=eth,net,web3
      --http.corsdomain=*
      --http.vhosts=*
      --maxpeers=100
      --datadir=/erigon
      --ws
      --ws.compression
      --authrpc.addr=0.0.0.0
      --authrpc.port=8551
      --torrent.upload.rate=32mb
      --torrent.download.rate=32mb
      --log.console.verbosity=debug
      --metrics
    profiles:
      - erigon
    networks:
      - bridge

  prometheus:
    build:
      context: ./docker/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    profiles:
      - monitoring
    networks:
      - bridge

  node-exporter:
    image: quay.io/prometheus/node-exporter:latest
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro,rslave'
    profiles:
      - monitoring
    networks:
      - bridge

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    profiles:
      - monitoring
    networks:
      - bridge

  grafana:
    build:
      context: ./docker/grafana
    ports:
      - 3000:3000
    profiles:
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    networks:
      - bridge

  blockscience:
    build:
      context: ./docker/blockscience
    image: blockscience:latest
    profiles:
      - buildonly

networks:
  bridge:
    driver: bridge
    attachable: true